from fastapi import FastAPI, File, UploadFile, HTTPException
from tensorflow.keras.models import load_model
from .utils.transform import file_to_grayscale_image
from PIL import Image
import numpy as np

app = FastAPI()

# Cargar el modelo entrenado
model = load_model("app/models/my_model.h5")

@app.post("/predict/")
async def predict(file: UploadFile = File(...)):
    # Verificar que se haya subido un archivo
    if not file:
        raise HTTPException(status_code=400, detail="Se requiere un archivo")

    # Convertir el archivo subido en una imagen en escala de grises
    try:
        image = file_to_grayscale_image(file.file)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al procesar el archivo: {str(e)}")

    # Preprocesar la imagen para el modelo
    image = image.resize((128, 128))  # Ajustar al tamaño de entrada del modelo
    image = np.array(image).reshape((1, 128, 128, 1)) / 255.0  # Normalizar

    # Realizar la predicción
    prediction = model.predict(image)
    result = "Malware detectado" if prediction[0][0] > 0.5 else "Archivo seguro"

    return {"prediction": result}
